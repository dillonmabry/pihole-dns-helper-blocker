import requests, json
from database import Database
import config
import time

def get_source_data(sourcedb):
    """ get pi source domains """
    cursor = sourcedb.cursor
    rec = cursor.execute('''
        select domain,count(domain)
        from queries
        group by domain
        order by count(domain) desc limit 10;
    ''')
    rows = rec.fetchall()
    sourcedb.close()
    return rows

def process_domains(source_data, targetdb):
    """ process domains and flag potential sub-ips """
    sub_domains = []
    stg_cursor = targetdb.cursor
    for idx, row in enumerate(source_data):
        domain = row[0]
        res = requests.get(config.THREAT_API, params = {"domain": domain })
        res_json = res.json() # metadata
        votes = res_json.get("votes", None)
        if votes is not None:
            if votes < 0: # flag potential malware ips
                print("Potential domain malicious: {0}".format(domain))
                resolutions = res_json["resolutions"]
                sub_domains = [(domain, d['ip_address'], d['last_resolved']) for d in resolutions]
    """ update staging data """
    stg_cursor.executemany('''
            insert into Domains (parent_domain, ip_address, last_resolved) values (?, ?, ?)
        ''', sub_domains)
    targetdb.conn.commit()

    """ cleanup and commit """
    targetdb.close()

if __name__ == '__main__':
    sourcedb = Database(config.PI_DATABASE['db'])
    targetdb = Database(config.STAGING_DATABASE['db'])
    pi_domains = get_source_data(sourcedb)
    start_time = time.time()
    process_domains(pi_domains, targetdb)
    print("--- Processed in %s seconds ---" % (time.time() - start_time))
